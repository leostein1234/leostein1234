def mutations(seq, seq2):
    count = 0
    for x in range(len(seq)):
        if seq[x] not in seq2[x]:
            count +=1
    return count


print(mutations('GATAATGCAGCCTCCCCATAATCTACGAAAACCTGTAGTGCTCCTATCAATCGACGAGGTGTTAAGTGTAGCGATGCGACGTCCACAAAGCTAAATATTAGCTCTCTGAGCATTCCTCGCTCAAAAGATCTGGCGCTTATGGTGAGATGTCCAAGACCATCTCCTACTCACCCATTGGCGGGTTTACATATCTAACCCATTGACGGGGCTTCCAACTCGAATGCTTTTTCACTGATGCCGATTCCTTAATCTAATCCCCGCATGACTTCGTTGTATCGGCGAGGTGGGCGGCAACTGCTCCTAATTCTGTTTTGCATTACCAAGGGACAACGTTATTACATCACTTCCGAATTGGCCAAGAACCCACAGTACTCTAGCTCGTGCTTATATCCCACCGCAACAATGCCAGTCTGATGGGCCTTCCCCAGAACTGCAGGAGTACCCTGTCAGTTTCGGACTGGACGGGTCCTCCAGCATGCAAGTAGGGCAAACCTCTAGGCTAATGAGGCCGTTGCTATAGACAGTTGAATTGTGGAACATTGATGGGTATACAGTGGGGACCCCCGAACGCTTTTCAATCATGGCTATTTAGATTCCTATACGTCTACTCAAGTTATCAGCGGCCGTGCCTCCGGACCTTTACTGAGAGAAAGACCAAGTTCGATGCGCTCATACCTTGTGCTCAACTTCATATCAGAAAGTCCCAGCATGCGCACACTGCAACTGGTGGAACGTTGGAAGTGCCAGTGGAAAGCCTAGCGGATAACGTGGGCTCGCTGCGTCGTGCCTCGGTCTTTTGGTCCAATATGCGTCGTCGATTTCCCTAAGCTTTCCTCCTGGGCTAGCGTCGGCACGGATAGTGTTCCTACAACGGATAATATTACGAGGGCACTGCAAGACATCGTCTCTGCTATGAAAGGAGTACTTACCAGCCCGACGTCCCCGAATTTCGCTGTTATATCGCAAGATGTCTAGGATGTTGCAATACATAG', 
'GCAGCTTCATGCTCACGGTTATTATTCAAAAACGTTTTCCGTCATTTGTACCTAGGGACTGTTAAGTTTAGTGCTGTCAAGGCAATAAACGTATTTAGTTTGTACGAAGCCACTTCTATATCTTTTAACATCTCCGTTAGGGTTAGCTGTGAATCAAAGGCCCCTTCGCTACTATGGGCAGCTACTAGTCGCGCACGCAATCCCCGGGTTAATATCTCGATTTTGGCTGCATAACTTCCGGCTAGGTAAGCTCCGCATGATATGACTTACGTGTATCGGAAGGCTCGGGGGGAACCGGTCGTTGACGTGTCTCCTAACACGTAGGGACAGCGTCTTACCATCACTTCCTGACATACAAACAAACCGCCAAACTGTATATCGTTATAACCTGACATCACAAACAGGGGTGTCAGTTGGGAAATACGCTTAATTCCGCGAGTATCAGTTCGGATATGGAGTCTAGGTTCAGTGTTACAACCGTGTAGATGAAACCCCTAGGCAACCGAGGCAGGTACAGTATAAGCTGCAATGACGACACAATTTTGGGGATGGCGGGGGCATCGGCGAGGTAATTTTTATCAAGGTCTATGCACTTCCGGAAAGTAGACCCAGTTTAAGACGAGACAATCTTTCGCAACTTTAAGCTTGGACCATCCAGGTGTAATGCTCCTGAAGCAAAGGCTCAACTCCATGAAATTCAGTCGACACGGTAGGAAAAGGGAAGTGAAGTCATGTAGTATGGCTCAGCTAAGAGTTCCGATGGGAAAGTGGGTTCGCTTCGTCGTACTTCGCGCTTGTAGCGCCATGAGAGTGGTATTTCCCATTAATATCCCCCCCTTTGGACGCTAGGACGCTGCATACGCTCCATAAGTTTGAAATAATCTGGGGGCGCCGAAAGGCGCGCTTTCTGCTATAAAAGGAATTCTTCCAATATGCACTTTCACCGTCTGGACCGTAACCACGCACGGTGTGTACGCTGGAACAACTCTTTG'))



#simpiler way of doing the same thing

# def hamming_distance(s, t):
#     value = 0
#     for a, b in zip(s, t):
#         if a != b: value += 1
#     return value